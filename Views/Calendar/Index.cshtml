@{
    ViewData["Title"] = "Calendar";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userId = ViewBag.UserId as string;
    var role = ViewBag.Role as string;
    var existingDates = ViewBag.ExistingDates as List<string> ?? new List<string>();
}

<h2 class="text-center mt-4">Select Available Dates</h2>

<div class="container mt-3">
    <p><strong>Role:</strong> @role | <strong>ID:</strong> @userId</p>

    <div class="row mb-3">
        <div class="col-md-4">
            <input type="date" id="datePicker" class="form-control" />
        </div>
        <div class="col-md-3">
            <input type="time" id="startTime" class="form-control" placeholder="Start Time" />
        </div>
        <div class="col-md-3">
            <input type="time" id="endTime" class="form-control" placeholder="End Time" />
        </div>
        <div class="col-md-2">
            <button id="addDateBtn" class="btn btn-primary w-100">Add</button>
        </div>
    </div>

    <h4>Your Available Dates:</h4>
    <ul id="selectedDates" class="list-group">
        @foreach (var date in existingDates)
        {
            var parts = date?.Split('|');
            string formattedDate = "";
            if (parts != null && parts.Length == 3)
            {
                var dt = DateTime.TryParse(parts[0], out var parsed) ? parsed.ToString("MMMM dd, yyyy") : parts[0];
                formattedDate = $"{dt} ({parts[1]} - {parts[2]})";
            }
            else
            {
                formattedDate = date;
            }
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @formattedDate
                <button class="btn btn-sm btn-danger" onclick="removeDate('@date')">Remove</button>
            </li>
        }
    </ul>

    <button id="saveBtn" class="btn btn-success mt-3">Save Availability</button>
</div>

<!-- Success Toast -->
<div id="removeToast" class="toast align-items-center text-bg-success border-0 position-fixed bottom-0 end-0 m-4" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: 9999; display:none;">
  <div class="d-flex">
    <div class="toast-body">
      Removed successfully!
    </div>
  </div>
</div>

<!-- Add Success Toast -->
<div id="addToast" class="toast align-items-center text-bg-success border-0 position-fixed bottom-0 end-0 m-4" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: 9999; display:none;">
  <div class="d-flex">
    <div class="toast-body">
      Availability added successfully!
    </div>
  </div>
</div>

@section Scripts {
    <script>
        const existingDates = new Set(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(existingDates)));
        let removeToast = document.getElementById('removeToast');
        let addToast = document.getElementById('addToast');

        document.getElementById("addDateBtn").addEventListener("click", function () {
            const date = document.getElementById("datePicker").value;
            const startTime = document.getElementById("startTime").value;
            const endTime = document.getElementById("endTime").value;

            if (!date || !startTime || !endTime) {
                alert("Please fill in all fields (date, start time, and end time)");
                return;
            }

            if (startTime >= endTime) {
                alert("End time must be after start time");
                return;
            }

            // Remove any existing slot for the same date
            for (let d of Array.from(existingDates)) {
                if (d.startsWith(date + "|")) {
                    existingDates.delete(d);
                    // Also remove from the UI
                    const items = document.querySelectorAll("#selectedDates li");
                    items.forEach(li => {
                        if (li.textContent.startsWith(date)) li.remove();
                    });
                }
            }

            const dateTimeKey = `${date}|${startTime}|${endTime}`;
            existingDates.add(dateTimeKey);

            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            li.innerHTML = `
                ${date} (${startTime} - ${endTime})
                <button class="btn btn-sm btn-danger" onclick="removeDate('${dateTimeKey}')">Remove</button>
            `;
            document.getElementById("selectedDates").appendChild(li);

            // Clear inputs
            document.getElementById("datePicker").value = "";
            document.getElementById("startTime").value = "";
            document.getElementById("endTime").value = "";
        });

        document.getElementById("saveBtn").addEventListener("click", async function () {
            const dates = Array.from(existingDates);
            const res = await fetch("/Calendar/SaveDates", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(dates)
            });

            if (res.ok) {
                const json = await res.json();
                if (json.success) {
                    addToast.style.display = 'block';
                    setTimeout(() => {
                        addToast.style.display = 'none';
                        location.reload();
                    }, 2000);
                } else alert("❌ Server responded but didn't confirm success.");
            } else {
                alert("❌ Failed to save dates.");
            }
        });

        function removeDate(dateToRemove) {
            if (!confirm(`Are you sure you want to remove this time slot?`)) return;

            fetch('/Calendar/RemoveDate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dateToRemove)
            }).then(() => {
                // Show toast instead of alert
                removeToast.style.display = 'block';
                setTimeout(() => {
                    removeToast.style.display = 'none';
                    location.reload();
                }, 2000);
            });
        }
    </script>
}
